from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from helpers import show_main_menu  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ show_main_menu —ñ–∑ helpers.py
from database.db import add_user
from handlers.stats_handlers import show_statistics  # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å, —Å–ø—Ä–∏–Ω—Ç —Ç–∞ –≥–æ–¥–∏–Ω–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º.
    """
    user_data = context.user_data

    week = user_data.get("week", 1)
    sprint = user_data.get("sprint", 1)
    week_hours = user_data.get("week_hours", 0.0)
    sprint_hours = user_data.get("sprint_hours", 0.0)
    total_hours = user_data.get("total_hours", 0.0)

    text = (
        f"üìÜ <b>–¢–∏–∂–¥–µ–Ω—å:</b> {week}\n"
        f"üöÄ <b>–°–ø—Ä–∏–Ω—Ç:</b> {sprint}\n\n"
        f"‚è≥ <b>–ì–æ–¥–∏–Ω –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:</b> {week_hours:.1f}\n"
        f"üèÅ <b>–ì–æ–¥–∏–Ω –∑–∞ —Å–ø—Ä–∏–Ω—Ç:</b> {sprint_hours:.1f}\n"
        f"üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:</b> {total_hours:.1f}"
    )

    keyboard = [
        [KeyboardButton("üìö –¢—Ä–µ–∫–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")],
        [KeyboardButton("‚úÖ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å")],
        [KeyboardButton("üèÜ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å–ø—Ä–∏–Ω—Ç")],
        [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        chat_id = update.callback_query.message.chat_id
        await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="HTML")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    1. –†–µ—î—Å—Ç—Ä—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ –Ω–æ–≤–∏–π).
    2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤ user_data.
    3. –í—ñ–¥–∫—Ä–∏–≤–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Anon"
    add_user(user_id, username)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–∏–∂–¥–µ–Ω—å, —Å–ø—Ä–∏–Ω—Ç, –≥–æ–¥–∏–Ω–∏
    user_data = context.user_data
    user_data["week"] = 1
    user_data["sprint"] = 1
    user_data["week_hours"] = 0.0
    user_data["sprint_hours"] = 0.0
    user_data["total_hours"] = 0.0

    await show_main_menu(update, context)


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏.
    """
    text = update.message.text
    user_data = context.user_data

    if text in ["üìö –¢—Ä–µ–∫–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", "–¢—Ä–µ–∫–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è"]:
        await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏? –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        context.user_data["awaiting_hours"] = True  # –í–∫–∞–∑—É—î–º–æ, —â–æ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≥–æ–¥–∏–Ω

    elif context.user_data.get("awaiting_hours"):
        context.user_data["awaiting_hours"] = False  # –ó–Ω—ñ–º–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        await handle_hours_input(update, context)

    elif text in ["‚úÖ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å", "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å"]:
        user_data["week"] = user_data.get("week", 1) + 1
        user_data["week_hours"] = 0.0
        await show_main_menu(update, context)

    elif text in ["üèÜ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å–ø—Ä–∏–Ω—Ç", "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å–ø—Ä–∏–Ω—Ç"]:
        user_data["sprint"] = user_data.get("sprint", 1) + 1
        user_data["week"] = 1
        user_data["week_hours"] = 0.0
        user_data["sprint_hours"] = 0.0
        await show_main_menu(update, context)

    elif text in ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
        await show_statistics(update, context)

    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑ –º–µ–Ω—é.")


async def handle_hours_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –≥–æ–¥–∏–Ω –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.
    """
    user_data = context.user_data

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ —á–∏—Å–ª–æ
        hours = float(update.message.text)
        user_data["week_hours"] = user_data.get("week_hours", 0.0) + hours
        user_data["sprint_hours"] = user_data.get("sprint_hours", 0.0) + hours
        user_data["total_hours"] = user_data.get("total_hours", 0.0) + hours

        await update.message.reply_text(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ {hours} –≥–æ–¥–∏–Ω.")
        await show_main_menu(update, context)
    except ValueError:
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –≥–æ–¥–∏–Ω.")
