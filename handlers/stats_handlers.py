from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database.db import get_category_stats, get_logs_by_category


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –∑–∞ –∫–æ–∂–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é.
    """
    user_id = update.effective_user.id
    stats = get_category_stats(user_id)

    if not stats:
        await update.message.reply_text("‚ùå <b>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>", parse_mode="HTML")
        return

    text = "üìä <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:</b>\n\n"
    buttons = []

    for category, hours in stats.items():
        text += f"‚Ä¢ {category}: {hours:.1f} –≥–æ–¥.\n"
        buttons.append([InlineKeyboardButton(f"üìú {category}", callback_data=f"stats_{category}")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")


async def show_category_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –ª–æ–≥–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    """
    query = update.callback_query
    await query.answer()

    category = query.data.split("_")[1]
    user_id = query.from_user.id
    logs = get_logs_by_category(user_id, category)

    if not logs:
        await query.message.reply_text(f"‚ùå <b>–ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}.</b>", parse_mode="HTML")
        return

    text = f"üìú <b>–õ–æ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:</b>\n\n"
    for log in logs:
        text += f"‚Ä¢ {log['date']} ‚Äî {log['hours']} –≥–æ–¥.\n  <i>{log['note']}</i>\n\n"

    await query.message.reply_text(text, parse_mode="HTML")
