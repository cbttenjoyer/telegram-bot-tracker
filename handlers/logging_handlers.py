from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from database.db import log_learning_time
from datetime import datetime
from helpers import show_main_menu  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ show_main_menu –∑ helpers.py

CATEGORY, HOURS, NOTE = range(3)  # –ï—Ç–∞–ø–∏ –¥—ñ–∞–ª–æ–≥—É


async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É. –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ç—Ä–µ–∫—ñ–Ω–≥—É –∑ –µ–º–æ–¥–∑—ñ.
    """
    keyboard = [
        [InlineKeyboardButton("üêç Python", callback_data='Python')],
        [InlineKeyboardButton("ü§ñ Prompt Engineering", callback_data='Prompt Engineering')],
        [InlineKeyboardButton("üß† Psy", callback_data='Psy')],
        [InlineKeyboardButton("üéì UCU", callback_data='UCU')],
        [InlineKeyboardButton("üìù –Ü–Ω—à–µ", callback_data='–Ü–Ω—à–µ')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìå <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:</b>", reply_markup=reply_markup, parse_mode="HTML")
    return CATEGORY


async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    """
    query = update.callback_query
    await query.answer()
    context.user_data["category"] = query.data
    await query.message.edit_text(text=f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {query.data}.\n–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –≤–∏—Ç—Ä–∞—á–µ–Ω–æ?")
    return HOURS


async def hours_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø–∏—Ç—É—î–º–æ –≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –Ω–∞–≤—á–∞–Ω–Ω—è.
    """
    hours_str = update.message.text
    try:
        hours = float(hours_str.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≥–æ–¥–∏–Ω–∏). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return HOURS

    context.user_data["hours"] = hours
    await update.message.reply_text("–î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É –∑–∞–º—ñ—Ç–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:")
    return NOTE


async def note_entered(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω—É –Ω–æ—Ç–∞—Ç–∫—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ.
    """
    note = update.message.text
    await save_learning_record(update, context, note)
    return ConversationHandler.END


async def skip_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–ø—É—Å–∫ –Ω–æ—Ç–∞—Ç–∫–∏.
    """
    await save_learning_record(update, context, "")
    return ConversationHandler.END


async def save_learning_record(update: Update, context: ContextTypes.DEFAULT_TYPE, note: str):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –±–∞–∑—É —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    category = context.user_data.get("category", "–Ü–Ω—à–µ")
    hours = context.user_data.get("hours", 0.0)
    user_id = update.effective_user.id

    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_learning_time(user_id, category, hours, note, now_str)

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —É user_data
    context.user_data["week_hours"] = context.user_data.get("week_hours", 0.0) + hours
    context.user_data["sprint_hours"] = context.user_data.get("sprint_hours", 0.0) + hours
    context.user_data["total_hours"] = context.user_data.get("total_hours", 0.0) + hours

    await update.message.reply_text("–í–∞—à —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π!")
    await show_main_menu(update, context)


def get_logging_conversation_handler() -> ConversationHandler:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î ConversationHandler –¥–ª—è —Ç—Ä–µ–∫—ñ–Ω–≥—É –Ω–∞–≤—á–∞–Ω–Ω—è.
    """
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–¢—Ä–µ–∫–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è"), choose_category)],
        states={
            CATEGORY: [CallbackQueryHandler(category_chosen)],
            HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, hours_entered)],
            NOTE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, note_entered),
                CommandHandler('skip', skip_note)
            ],
        },
        fallbacks=[],
        per_message=False
    )
